---
- name: Exclude packages from being update.
  command: zypper addlock "{{ item }}"
  loop: "{{ update_reboot_suse_exclude_pkgs[inventory_hostname] | default([]) }}"
  changed_when: false
  tags: [ 'update_reboot' ]

- name: Refresh all repos.
  community.general.zypper_repository:
    repo: "*"
    runrefresh: yes
  tags: [ 'update_reboot' ]

- name: Ensure all packages are Updated
  community.general.zypper:
    name: "*"
    state: latest
  register: update_reboot_pkgs_update
  when: update_reboot_suse_security_patches | bool == false
  tags: [ 'update_reboot' ]

- name: Ensure the security patches are installed.
  community.general.zypper:
    update_cache: yes
    name: "*"
    state: latest
    type: patch
  register: update_reboot_pkgs_patch
  when: update_reboot_suse_security_patches | bool == true
  tags: [ 'update_reboot' ]

- name: List installed packages.
  shell: >
    rpm -qa --qf '(%{INSTALLTIME:date}):
    %{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}\n'
    | grep "$(date +%a\ %d\ %b\ %Y)" | sort -n
  args:
    executable: /bin/bash
  when: >
    update_reboot_pkgs_update is changed
    and update_reboot_log_enable | bool
    or update_reboot_pkgs_patch is changed
    and update_reboot_log_enable | bool
  register: update_reboot_pkgs_logs
  tags: [ 'update_reboot' ]

- import_tasks: logging.yml
  when: >
    update_reboot_pkgs_logs is changed
    and update_reboot_log_enable | bool
  tags: [ 'update_reboot' ]

- name: Remove excluded packages.
  command: zypper removelock "{{ item }}"
  loop: "{{ update_reboot_suse_exclude_pkgs[inventory_hostname] | default([]) }}"
  changed_when: false
  tags: [ 'update_reboot' ]

- name: Ensure if service restart is required.
  command: zypper ps
  failed_when: false
  changed_when: false
  register: update_reboot_service_restart_required
  tags: [ 'update_reboot' ]

- name: Ensure the service are restarted.
  shell: systemctl restart $(zypper ps -sss)
  failed_when: false
  changed_when: false
  when: update_reboot_service_restart_required.rc != 0
  tags: [ 'update_reboot' ]

- name: Ensure a new kernel has been installed.
  stat:
    path: /boot/do_purge_kernels
  register: update_reboot_required
  tags: [ 'update_reboot' ]

- debug:
    msg: reboot is required
  changed_when: true
  when: >
    update_reboot_required.stat.exists == true
    and update_reboot_required_enable | bool
  notify:
    - Ensure the node reboots.
    - Node coming back from reboot.
  tags: [ 'update_reboot' ]
...